name: Create Release

on:
  push:
    tags:
      - 'v*' # Run workflow on version tags (v1.0.0, v2.1.3, etc.)

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Try installing dependencies with Yarn
        run: |
          echo "Node.js version: $(node -v)"
          echo "npm version: $(npm -v)"

          echo "Installing Yarn..."
          npm install -g yarn

          echo "Yarn version: $(yarn --version)"
          echo "Using Yarn to install dependencies..."

          # Add verbose flag for debugging
          yarn install --verbose

      - name: Fallback to npm if Yarn fails
        if: ${{ failure() }}
        run: |
          echo "Yarn installation failed, trying npm with limited dependencies..."

          # Create a temporary minimal package.json with just essential dependencies
          echo "Creating a minimal package.json for essential dependencies..."
          cp package.json package.json.bak

          # Extract just the build scripts and essential dependencies
          node -e "
            const pkg = require('./package.json');
            const minimal = {
              name: pkg.name,
              version: pkg.version,
              scripts: { build: pkg.scripts.build },
              dependencies: {},
              devDependencies: {}
            };
            // Add only essential dependencies needed for build
            const essentials = ['webpack', 'webpack-cli', 'babel-loader', '@babel/core', '@babel/preset-env'];
            essentials.forEach(dep => {
              if (pkg.dependencies && pkg.dependencies[dep]) minimal.dependencies[dep] = pkg.dependencies[dep];
              if (pkg.devDependencies && pkg.devDependencies[dep]) minimal.devDependencies[dep] = pkg.devDependencies[dep];
            });
            console.log(JSON.stringify(minimal, null, 2));
          " > minimal-package.json

          mv minimal-package.json package.json

          # Try installing with npm
          npm install

          # Restore original package.json 
          mv package.json.bak package.json

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Build project
        run: npm run build
        env:
          DEBUG: '1'

      - name: Examine ZIP contents on failure
        if: ${{ failure() }}
        run: |
          echo "Checking if ZIP file exists..."
          if [ -f "dist/fluid-design-system-for-elementor.zip" ]; then
            echo "✅ ZIP file exists"
            echo "Listing ZIP contents:"
            unzip -l dist/fluid-design-system-for-elementor.zip
            
            echo "Extracting ZIP to check structure..."
            mkdir -p /tmp/zip-check
            unzip -q dist/fluid-design-system-for-elementor.zip -d /tmp/zip-check
            
            echo "Checking for vendor/autoload.php..."
            if [ -f "/tmp/zip-check/fluid-design-system-for-elementor/vendor/autoload.php" ]; then
              echo "✅ vendor/autoload.php exists in ZIP"
            else
              echo "❌ vendor/autoload.php missing from ZIP"
              echo "Directory structure:"
              find /tmp/zip-check -type f | grep -i vendor || echo "No vendor files found"
            fi
          else
            echo "❌ ZIP file not found at dist/fluid-design-system-for-elementor.zip"
          fi

      - name: Validate plugin structure
        run: bash __tests__/validate-zip.sh
        env:
          DEBUG: '1'

  build_and_release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write # This is required for creating releases
      pull-requests: read # This is needed for the changelog generator
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Try installing dependencies with Yarn
        run: |
          echo "Node.js version: $(node -v)"
          echo "npm version: $(npm -v)"

          echo "Installing Yarn..."
          npm install -g yarn

          echo "Yarn version: $(yarn --version)"
          echo "Using Yarn to install dependencies..."

          # Add verbose flag for debugging
          yarn install --verbose

      - name: Fallback to npm if Yarn fails
        if: ${{ failure() }}
        run: |
          echo "Yarn installation failed, trying npm with limited dependencies..."

          # Create a temporary minimal package.json with just essential dependencies
          echo "Creating a minimal package.json for essential dependencies..."
          cp package.json package.json.bak

          # Extract just the build scripts and essential dependencies
          node -e "
            const pkg = require('./package.json');
            const minimal = {
              name: pkg.name,
              version: pkg.version,
              scripts: { build: pkg.scripts.build },
              dependencies: {},
              devDependencies: {}
            };
            // Add only essential dependencies needed for build
            const essentials = ['webpack', 'webpack-cli', 'babel-loader', '@babel/core', '@babel/preset-env'];
            essentials.forEach(dep => {
              if (pkg.dependencies && pkg.dependencies[dep]) minimal.dependencies[dep] = pkg.dependencies[dep];
              if (pkg.devDependencies && pkg.devDependencies[dep]) minimal.devDependencies[dep] = pkg.devDependencies[dep];
            });
            console.log(JSON.stringify(minimal, null, 2));
          " > minimal-package.json

          mv minimal-package.json package.json

          # Try installing with npm
          npm install

          # Restore original package.json 
          mv package.json.bak package.json

      - name: Validate version consistency
        run: |
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          PLUGIN_VERSION=$(grep -m 1 "Version:" src/wordpress-plugin/fluid-design-system-for-elementor.php | awk '{print $3}')
          README_VERSION=$(grep "Stable tag:" src/wordpress-plugin/readme.txt | awk '{print $3}')
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "Tag version: $TAG_VERSION"
          echo "Plugin version: $PLUGIN_VERSION"
          echo "Readme version: $README_VERSION"
          echo "Package.json version: $PACKAGE_VERSION"

          if [ "$TAG_VERSION" != "$PLUGIN_VERSION" ] || [ "$TAG_VERSION" != "$README_VERSION" ] || [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ Version mismatch detected!"
            exit 1
          fi

          echo "✅ All versions match: $TAG_VERSION"

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Build project
        run: npm run build

      - name: Verify vendor directory in ZIP
        run: |
          echo "Checking ZIP file contents..."
          unzip -l dist/fluid-design-system-for-elementor.zip | grep "vendor/autoload.php" || {
            echo "ERROR: vendor/autoload.php not found in ZIP file!"
            echo "Listing ZIP contents..."
            unzip -l dist/fluid-design-system-for-elementor.zip
            
            echo "Checking if vendor directory exists in project..."
            if [ -d "vendor" ]; then
              echo "Vendor directory exists in project:"
              ls -la vendor
              
              if [ -f "vendor/autoload.php" ]; then
                echo "vendor/autoload.php exists in project."
              else
                echo "vendor/autoload.php DOES NOT exist in project!"
              fi
            else
              echo "Vendor directory DOES NOT exist in project!"
            fi
            
            exit 1
          }
          echo "✅ vendor/autoload.php found in ZIP file"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # If this is the first tag, don't use --since-tag
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_ENV
            echo "## 🚀 Initial Release" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "* Created Fluid Design System for Elementor plugin" >> $GITHUB_ENV
            echo "* Added fluid spacing utilities" >> $GITHUB_ENV
            echo "* Added fluid typography capabilities" >> $GITHUB_ENV
            echo "* Integrated with Elementor's responsive system" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "CHANGELOG<<EOF" >> $GITHUB_ENV
            echo "## What's Changed Since $PREVIOUS_TAG" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            git log --pretty=format:"* %s" $PREVIOUS_TAG..HEAD | grep -v "Merge" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/fluid-design-system-for-elementor.zip
          draft: false
          prerelease: false
          name: Release ${{ github.ref_name }}
          body: |
            # Fluid Design System for Elementor ${{ github.ref_name }}

            ${{ env.CHANGELOG }}

            ## Installation
            Download the zip file and install via WordPress plugin manager or extract to wp-content/plugins.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify build output (for local testing)
        if: steps.create_release.outcome != 'success'
        run: |
          echo "✅ Build completed successfully. ZIP file created at dist/fluid-design-system-for-elementor.zip"
          echo "Note: GitHub release step was skipped in local testing."

      # Save the built ZIP file as an artifact for the WordPress deployment job
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-zip
          path: dist/fluid-design-system-for-elementor.zip
          retention-days: 1

  deploy_to_wordpress:
    needs: build_and_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history and tags

      # Download the plugin ZIP artifact from the previous job
      - name: Download plugin ZIP
        uses: actions/download-artifact@v4
        with:
          name: plugin-zip
          path: dist/

      # Get the tag name without the 'v' prefix
      - name: Extract tag name
        id: get-tag
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/v}"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "Tag name for WordPress deployment: $TAG_NAME"

      # Extract the ZIP file
      - name: Extract plugin
        run: |
          mkdir -p /tmp/plugin
          unzip -q dist/fluid-design-system-for-elementor.zip -d /tmp/plugin
          ls -la /tmp/plugin

      # Setup SVN
      - name: Setup SVN
        run: |
          # Install SVN if not already installed
          which svn || sudo apt-get update && sudo apt-get install -y subversion

      # Checkout the SVN repository
      - name: Checkout SVN repository
        run: |
          # Create a clean SVN checkout
          mkdir -p /tmp/svn
          svn checkout --non-interactive --trust-server-cert --username=${{ secrets.SVN_USERNAME }} --password=${{ secrets.SVN_PASSWORD }} https://plugins.svn.wordpress.org/fluid-design-system-for-elementor/ /tmp/svn

          # Create directories if they don't exist
          mkdir -p /tmp/svn/trunk
          mkdir -p /tmp/svn/assets
          mkdir -p "/tmp/svn/tags/${{ env.TAG_NAME }}"

      # Update trunk
      - name: Update trunk
        run: |
          echo "Updating trunk..."

          # Empty trunk directory
          rm -rf /tmp/svn/trunk/*

          # Copy plugin files to trunk
          cp -R /tmp/plugin/fluid-design-system-for-elementor/* /tmp/svn/trunk/

          echo "Trunk updated."

      # Update the tag
      - name: Update tag
        run: |
          echo "Updating tag ${{ env.TAG_NAME }}..."

          # Delete the tag directory if it exists
          if [ -d "/tmp/svn/tags/${{ env.TAG_NAME }}" ]; then
            rm -rf "/tmp/svn/tags/${{ env.TAG_NAME }}"
          fi

          # Create the tag directory
          mkdir -p "/tmp/svn/tags/${{ env.TAG_NAME }}"

          # Copy trunk to tag
          cp -R /tmp/svn/trunk/* "/tmp/svn/tags/${{ env.TAG_NAME }}"

          echo "Tag updated."

      # Update assets
      - name: Update assets
        run: |
          echo "Updating assets..."

          # Create assets directory in SVN
          mkdir -p /tmp/svn/assets

          # Check if assets directory exists in the repo
          if [ -d "__assets__" ]; then
            # Local assets directory exists - copy assets to SVN
            cp -R __assets__/* /tmp/svn/assets/
            echo "Copied assets from local repository."
          else
            echo "Local assets directory not found. Attempting to preserve existing assets..."
            
            # Try to download existing assets from WordPress.org
            SVN_ASSETS_URL="https://ps.w.org/fluid-design-system-for-elementor/assets"
            ASSET_FILES=(
              "banner-772x250.png"
              "banner-1544x500.png"
              "icon-128x128.png"
              "icon-256x256.png"
            )
            
            ASSETS_FOUND=false
            for asset in "${ASSET_FILES[@]}"; do
              echo "Checking for $asset..."
              if curl --output /dev/null --silent --head --fail "$SVN_ASSETS_URL/$asset"; then
                echo "Found $asset, downloading..."
                curl -s "$SVN_ASSETS_URL/$asset" -o "/tmp/svn/assets/$asset"
                ASSETS_FOUND=true
              fi
            done
            
            # Screenshots (try 1-10)
            for i in {1..10}; do
              if curl --output /dev/null --silent --head --fail "$SVN_ASSETS_URL/screenshot-$i.png"; then
                echo "Found screenshot-$i.png, downloading..."
                curl -s "$SVN_ASSETS_URL/screenshot-$i.png" -o "/tmp/svn/assets/screenshot-$i.png"
                ASSETS_FOUND=true
              fi
            done
            
            if [ "$ASSETS_FOUND" = true ]; then
              echo "Successfully preserved existing assets from WordPress.org."
            else
              echo "No existing assets found. Assets will need to be uploaded manually later."
              # Create a README file in the assets directory to explain
              echo "# Plugin Assets" > /tmp/svn/assets/README.txt
              echo "Please upload plugin assets through the WordPress.org plugin interface:" >> /tmp/svn/assets/README.txt
              echo "https://wordpress.org/plugins/fluid-design-system-for-elementor/advanced/" >> /tmp/svn/assets/README.txt
              echo "" >> /tmp/svn/assets/README.txt
              echo "Required assets include:" >> /tmp/svn/assets/README.txt
              echo "- banner-772x250.png" >> /tmp/svn/assets/README.txt
              echo "- banner-1544x500.png" >> /tmp/svn/assets/README.txt
              echo "- icon-128x128.png" >> /tmp/svn/assets/README.txt
              echo "- icon-256x256.png" >> /tmp/svn/assets/README.txt
              echo "- screenshot-1.png, screenshot-2.png, etc." >> /tmp/svn/assets/README.txt
            fi
          fi

          # Remove any hidden files
          find /tmp/svn/assets -name ".DS_Store" -delete
          find /tmp/svn/assets -name ".*" -delete

          echo "Assets directory prepared."

      # Check changes
      - name: Check SVN status
        run: |
          cd /tmp/svn
          svn status

      # Commit changes
      - name: Commit changes to WordPress.org
        run: |
          cd /tmp/svn

          # Add all changes
          svn add --force * --auto-props --parents --depth infinity -q

          # Remove any deleted files
          svn status | grep '^\!' | sed 's/! *//' | xargs -I% svn rm %@ || true

          # Commit the changes
          svn commit --non-interactive --trust-server-cert --username=${{ secrets.SVN_USERNAME }} --password=${{ secrets.SVN_PASSWORD }} -m "Deploy version ${{ env.TAG_NAME }} from GitHub"

          echo "Plugin successfully deployed to WordPress.org!"
